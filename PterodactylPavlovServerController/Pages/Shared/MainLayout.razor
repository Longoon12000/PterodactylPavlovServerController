@using PterodactylPavlovServerController.Stores
@using Fluxor
@using Microsoft.AspNetCore.Identity
@using PterodactylPavlovServerController.Areas.Identity.Data
@using PterodactylPavlovServerController.Services
@inherits Fluxor.Blazor.Web.Components.FluxorLayout

@inject IState<PageTitleState> PageTitleState
@inject NavigationManager NavigationManager
@inject UserManager<PterodactylPavlovServerControllerUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ApiKeyService ApiKey

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <PageTitle>@PageTitleState.Value.Title - PPSC</PageTitle>

            <div class="page">
                <div class="sidebar col-12">
                    <NavMenu />
                </div>

                <main class="bg-dark">
                    <div class="top-row navbar-dark px-4 border-0" style="background-color:rgba(0, 0, 0, 0.43)">
                        <h3 class="navbar-brand">@PageTitleState.Value.Title</h3>
                    </div>

                    <article class="content px-4">
                        @Body
                    </article>
                </main>
            </div>

            <BlazoredToasts />
        </Authorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {

    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            redirectToLogin();
            return;
        }

        if (HttpContextAccessor.HttpContext == null)
        {
            throw new Exception("THE LAST ERROR WITH THIS SHIT");
        }

        try
        {
            // SURELY THERE MUST EXIST A BETTER WAY THAN THIS FUCKING SHIT

            string? userId = UserManager.GetUserId(user);

            if (userId == null)
            {
                redirectToLogin();
                return;
            }

            PterodactylPavlovServerControllerUser? pterodactylUser = UserManager.Users.FirstOrDefault(u => u.Id == userId);

            if (pterodactylUser == null)
            {
                redirectToLogin();
                return;
            }

            ApiKey.ApiKey = pterodactylUser.PterodactylApiKey;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void redirectToLogin()
    {
        string returnUrl = Uri.EscapeDataString(NavigationManager.ToBaseRelativePath(NavigationManager.Uri));
        NavigationManager.NavigateTo($"Identity/Account/Login{(string.IsNullOrEmpty(returnUrl) ? "" : $"?returnUrl={returnUrl}")}");
    }
}