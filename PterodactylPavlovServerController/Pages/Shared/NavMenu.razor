@using Fluxor
@using Microsoft.AspNetCore.Identity
@using PterodactylPavlovServerController.Areas.Identity.Data
@using PterodactylPavlovServerController.Services
@using PterodactylPavlovServerController.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher Dispatcher
@inject PavlovRconConnectionService Rcon
@inject UserManager<PterodactylPavlovServerControllerUser> UserManager
@inject IHttpContextAccessor httpContextAccessor

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">PPSC</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="toggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="toggleNavMenu">
    <div class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <i class="fa-solid fa-house pe-2"></i> Home
            </NavLink>
        </div>
        <div class="nav-item has-submenu px-3">
            <NavLink class="nav-link" href="rcon">
                <i class="fa-solid fa-terminal pe-2"></i> RCON
            </NavLink>
            <div class="submenu flex-column ms-3">
                @if (!Rcon.Initialised || apiKey == null)
                {
                    <div class="spinner-border text-info" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
                else
                {
                    @foreach (PavlovRconConnection connection in Rcon.GetAllConnections(apiKey).OrderBy(c => c.PterodactylServer.Name))
                    {
                        <div class="nav-item">
                            <NavLink class="nav-link" style="" href="@($"rcon/{connection.ServerId}")">
                                @if (connection.Online.HasValue)
                                {
                                    @if (connection.Online.Value)
                                    {
                                        <i class="fa-regular fa-circle-up pe-2"></i>
                                    }
                                    else
                                    {
                                        <i class="fa-regular fa-circle-stop pe-2"></i>
                                    }
                                }
                                else
                                {
                                    <i class="fa-regular fa-circle pe-2"></i>
                                }
                                @connection.PterodactylServer.Name
                            </NavLink>
                        </div>
                    }
                }
            </div>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Identity/Account/Logout" Match="NavLinkMatch.All">
                <i class="fa-solid fa-user-lock pe-2"></i> Logout
            </NavLink>
        </div>
    </div>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void toggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private string? apiKey;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Rcon.OnServersUpdated += refresh;
        apiKey = (await UserManager.GetUserAsync(httpContextAccessor.HttpContext.User)).PterodactylApiKey;
    }

    private async void refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        Rcon.OnServersUpdated -= refresh;
    }

}