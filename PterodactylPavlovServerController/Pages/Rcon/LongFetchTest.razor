<h3>LongFetchTest</h3>

Value: @(value ?? fallbackValue ?? "Loading...")

@code {
    private string? value;
    private string? fallbackValue;

    //private delegate void MessageReceived();
    //private event MessageReceived? OnMessageReceived;

    protected override void OnInitialized()
    {
        //OnMessageReceived += omr;

        Task.Run(async () =>
        {
            fallbackValue = await Task.Run(async () =>
            {
                await Task.Delay(2000);
                return "Fallback";
            });
            await InvokeAsync(() => StateHasChanged());
            //OnMessageReceived?.Invoke();

            value = await Task.Run(async () =>
            {
                await Task.Delay(2000);
                if (Random.Shared.Next(2) == 0)
                {
                    return "Value";
                }
                else
                {
                    return null;
                }
            });
            await InvokeAsync(() => StateHasChanged());
            //OnMessageReceived?.Invoke();
        });
    }

    //private void omr() {
    //    StateHasChanged();
    //}
}
