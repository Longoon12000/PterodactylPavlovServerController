@using Fluxor
@using PavlovVR_Rcon.Models.Pavlov
@using PterodactylPavlovServerController.Services
@using PterodactylPavlovServerController.Stores
@using PterodactylPavlovServerDomain.Models
@using PterodactylPavlovServerController.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher Dispatcher
@inject PavlovRconConnectionService Rcon
@inject IState<PavlovServersState> PavlovServersState

@if (!Rcon.Initialised)
{
    <div>Loading...</div>
    return;
}

@if (Rcon.GetServer(ServerId) is not PavlovRconConnection connection)
{
    <div>Server does not exist</div>
    return;
}

@{
    PterodactylServerModel server = connection.PterodactylServer;
    ServerInfo? serverInfo = connection.ServerInfo;
}

<div>
    <a href="/rcon/@server.ServerId">@server.Name (@(serverInfo == null ? PavlovServersState.Value.ServerNamesFromGameIni.ContainsKey(server.ServerId) ? PavlovServersState.Value.ServerNamesFromGameIni[server.ServerId] : "..." : serverInfo.ServerName))</a>
</div>

@code {

    [Parameter]
    [EditorRequired]
    public string ServerId { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        Rcon.OnServersUpdated += refresh;

        base.OnInitialized();
    }

    private async void refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void Dispose(bool disposing)
    {
        Rcon.OnServersUpdated -= refresh;

        base.Dispose(disposing);
    }

    protected override void OnParametersSet()
    {
        Dispatcher.Dispatch(new PavlovServerLoadNameFromGameIniAction(ServerId));
        base.OnParametersSet();
    }

}