@using Fluxor
@using Microsoft.AspNetCore.Identity
@using PavlovVR_Rcon.Models.Pavlov
@using PterodactylPavlovServerController.Areas.Identity.Data
@using PterodactylPavlovServerController.Services
@using PterodactylPavlovServerController.Stores
@using PterodactylPavlovServerDomain.Models
@using PterodactylPavlovServerController.Models
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher Dispatcher
@inject PavlovRconConnectionService Rcon
@inject IState<PavlovServersState> PavlovServersState
@inject ApiKeyService ApiKey

@{
    if (!Rcon.Initialised)
    {
        <div>Loading...</div>
        return;
    }

    if (Rcon.GetServer(ApiKey.ApiKey, ServerId) is not PavlovRconConnection connection)
    {
        <div>Server does not exist</div>
        return;
    }

    PterodactylServerModel server = connection.PterodactylServer;
    ServerInfo? serverInfo = connection.ServerInfo;
}

<div>
    <a href="rcon/@server.ServerId">@server.Name (@(serverInfo == null ? PavlovServersState.Value.ServerNamesFromGameIni.ContainsKey(server.ServerId) ? PavlovServersState.Value.ServerNamesFromGameIni[server.ServerId] : "..." : serverInfo.ServerName))</a>
</div>

@code {

    [Parameter]
    [EditorRequired]
    public string ServerId { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Rcon.OnServersUpdated += refresh;
    }

    private async void refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        Rcon.OnServersUpdated -= refresh;
    }

    protected override void OnParametersSet()
    {
        if (Rcon.GetServer(ApiKey.ApiKey, ServerId) is not PavlovRconConnection connection)
        {
            return;
        }

        Dispatcher.Dispatch(new PavlovServerLoadNameFromGameIniAction(connection.ApiKey, ServerId));
        base.OnParametersSet();
    }

}