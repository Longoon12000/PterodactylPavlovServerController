@page "/rcon/{ServerId}"
@using Fluxor
@using Microsoft.AspNetCore.Identity
@using PavlovVR_Rcon.Models.Pavlov
@using PterodactylPavlovServerController.Areas.Identity.Data
@using PterodactylPavlovServerController.Contexts
@using PterodactylPavlovServerController.Services
@using PterodactylPavlovServerController.Stores
@using PterodactylPavlovServerDomain.Models
@using PterodactylPavlovServerController.Models
@using PterodactylPavlovServerController.Pages.Player
@using PterodactylPavlovServerDomain.Extensions
@using System.ComponentModel.DataAnnotations
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@inject IDispatcher Dispatcher
@inject PavlovRconConnectionService Rcon
@inject IState<PavlovServersState> PavlovServersState
@inject IState<MapsState> MapsState
@inject PavlovRconService RconService
@inject IToastService Toast
@inject PavlovServerContext PavlovServerContext
@inject SteamWorkshopService SteamWorkshopService
@inject ApiKeyService ApiKey

@{
    if (!Rcon.Initialised)
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        return;
    }

    if (Rcon.GetServer(ApiKey.ApiKey, ServerId) is not PavlovRconConnection connection)
    {
        Dispatcher.Dispatch(new PageTitleSetAction("Invalid server"));
        <div>Server does not exist</div>
        return;
    }

    PterodactylServerModel server = connection.PterodactylServer;
    ServerInfo? serverInfo = connection.ServerInfo;

    Dispatcher.Dispatch(new PageTitleSetAction($"{server.Name} ({(serverInfo == null ? PavlovServersState.Value.ServerNamesFromGameIni.ContainsKey(ServerId) ? PavlovServersState.Value.ServerNamesFromGameIni[ServerId] : "..." : serverInfo.ServerName)})"));

    if (!connection.Online.HasValue || !connection.Online.Value)
    {
        <h2 class="text-bg-danger">
            Server is offline.
        </h2>
        return;
    }

    if (serverInfo == null)
    {
        <div class="spinner-border text-info" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        return;
    }

    ServerMapModel serverMap = new()
            {
                MapLabel = serverInfo.MapLabel,
                GameMode = serverInfo.GameMode,
            };

    MapWorkshopModel? mapDetail = null;
    if (serverMap.IsWorkshopMap)
    {
        if (!MapsState.Value.MapDetails.TryGetValue(serverMap.WorkshopId, out mapDetail))
        {
            Dispatcher.Dispatch(new MapsLoadWorkshopAction(serverMap.WorkshopId));
        }
    }
}

<div class="container">
    <div class="row">
        <div class="col px-0">
            <div class="card bg-dark">
                <div class="row g-0">
                    <div class="col-auto">
                        <a href="@serverMap.Url" class="text-decoration-none" target="_blank">
                            <img class="card-img rounded-start" width="256" height="256" src="@(mapDetail == null ? "https://pavlov.bloodisgood.net/gunimages/unknown.png" : mapDetail.ImageURL + "/?imw=256&imh=256&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true")" alt="@serverInfo.MapLabel" />
                        </a>
                    </div>

                    <div class="col">
                        <div class="card-body">
                            <a href="@serverMap.Url" class="text-decoration-none" target="_blank">
                                <h5 class="card-title">@(mapDetail == null ? serverInfo.MapLabel : mapDetail.Name)</h5>
                            </a>
                            <p class="card-text">
                                <div class="container px-0">
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-gun"></i>
                                        </div>
                                        <div class="col px-1">@serverInfo.GameMode</div>
                                    </div>
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-person-rifle" style="color: limegreen;"></i>
                                        </div>
                                        <div class="col px-1">@(connection.PlayerListPlayers == null ? $"{serverInfo.CurrentPlayerCount()}*" : connection.PlayerListPlayers.Count)&nbsp;/&nbsp;@serverInfo.MaximumPlayerCount()</div>
                                    </div>
                                    <div class="row gx-0">
                                        <div class="col-auto px-1">
                                            <i class="fa-solid fa-chess-board"></i>
                                        </div>
                                        @if (serverInfo.Round == null)
                                        {
                                            <div class="col px-1">@serverInfo.RoundState</div>
                                        }
                                        else
                                        {
                                            <div class="col px-1">#@serverInfo.Round&nbsp;(@serverInfo.RoundState)</div>
                                        }
                                    </div>
                                    @if (serverInfo.Teams)
                                    {
                                        <div class="row gx-0">
                                            <div class="col-auto px-1">
                                                <i class="fa-solid fa-trophy" style="color: lightskyblue"></i>
                                            </div>
                                            <div class="col px-1">@(serverInfo.Team0Score?.ToString() ?? "Unavailable")</div>
                                        </div>
                                        <div class="row gx-0">
                                            <div class="col-auto px-1">
                                                <i class="fa-solid fa-trophy" style="color: tomato"></i>
                                            </div>
                                            <div class="col px-1">@(serverInfo.Team1Score?.ToString() ?? "Unavailable")</div>
                                        </div>
                                    }
                                    @if (File.Exists($"stats/{ServerId}.html"))
                                    {
                                        <div class="row position-absolute" style="bottom: 0;">
                                            <a href="stats/@ServerId" target="_blank" class="btn btn-outline-primary">Open statistics</a>
                                        </div>
                                    }
                                </div>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-3">
        <div class="col px-0">
            <div class="container px-0">
                <ul class="nav nav-tabs mb-3">
                    <li class="nav-item" role="presentation">
                        <a class="nav-link active" style="font-size: 2em;" data-bs-toggle="pill" href="#players">Players</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" style="font-size: 2em;" data-bs-toggle="pill" href="#maps">Map change</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" style="font-size: 2em;" data-bs-toggle="pill" href="#offline">Offline &amp; banned</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" style="font-size: 2em;" data-bs-toggle="pill" href="#cheats">Cheats</a>
                    </li>
                    <li class="nav-item" role="presentation">
                        <a class="nav-link" style="font-size: 2em;" data-bs-toggle="pill" href="#server">Server</a>
                    </li>
                    @if (serverInfo.GameMode == GameMode.TTT.ToString())
                    {
                        <li class="nav-item" role="presentation">
                            <a class="nav-link" style="font-size: 2em;" data-bs-toggle="pill" href="#ttt">TTT</a>
                        </li>
                    }
                </ul>

                <div class="tab-content">
                    <div class="tab-pane container active px-0" id="players">
                        @if (serverInfo.Teams)
                        {
                            <div class="row">
                                <div class="col rounded h2 p-3 me-2" style="background-color: lightskyblue; color: #222;">
                                    Blue Team
                                    @if (@serverInfo.Team0Score != null)
                                    {
                                        @:(@serverInfo.Team0Score)
                                    }
                                </div>
                                <div class="col rounded h2 p-3 ms-2" style="background-color: tomato; color: #222;">
                                    Red Team
                                    @if (@serverInfo.Team1Score != null)
                                    {
                                        @:(@serverInfo.Team1Score)
                                    }
                                </div>
                            </div>

                            <div class="row">

                                @{
                                    List<ulong> blueTeam = new();
                                    List<ulong> redTeam = new();

                                    if (connection.PlayerDetails is IReadOnlyDictionary<ulong, PlayerDetail> playersDetails)
                                    {
                                        blueTeam.AddRange(playersDetails.Where(kvp => kvp.Value.TeamId == 0).Select(kvp => kvp.Key));
                                        redTeam.AddRange(playersDetails.Where(kvp => kvp.Value.TeamId == 1).Select(kvp => kvp.Key));
                                    }
                                }

                                <div class="col ps-0">
                                    <div class="container">

                                        @foreach (ulong playerId in blueTeam)
                                        {
                                            <div class="row">
                                                <div class="col px-0">

                                                    <PlayerCard PlayerId="@playerId" ServerId="@ServerId" />

                                                </div>
                                            </div>
                                        }

                                    </div>
                                </div>

                                <div class="col pe-0">
                                    <div class="container">

                                        @foreach (ulong playerId in redTeam)
                                        {
                                            <div class="row">
                                                <div class="col px-0">

                                                    <PlayerCard PlayerId="@playerId" ServerId="@ServerId" />

                                                </div>
                                            </div>
                                        }

                                    </div>
                                </div>
                            </div>
                        }
                        else if (connection.PlayerDetails is IReadOnlyDictionary<ulong, PlayerDetail> playersDetails)
                        {
                            @foreach (ulong playerId in playersDetails.Keys)
                            {
                                <div class="row">
                                    <div class="col px-0">

                                        <PlayerCard PlayerId="@playerId" ServerId="@ServerId" />

                                    </div>
                                </div>
                            }
                        }
                    </div>

                    <div class="tab-pane container fade px-0" id="maps">
                        <h3>Click a map to change to</h3>
                        @if (!MapsState.Value.ServerMaps.ContainsKey(ServerId))
                        {
                            @:Loading...
                        }
                        else
                        {
                            foreach (ServerMapModel mapRow in MapsState.Value.ServerMaps[ServerId])
                            {
                                MapWorkshopModel? mapRowDetail = null;
                                if (mapRow.IsWorkshopMap)
                                {
                                    MapsState.Value.MapDetails.TryGetValue(mapRow.WorkshopId, out mapRowDetail);
                                }

                                <div class="card bg-dark me-2 mb-2" style="display: inline-block; width: 256px;@(serverInfo.MapLabel == mapRow.MapLabel ? " background-color: #7D7 !important; color: #444;" : "")">
                                    <a href="#" @onclick="() => changeMap(mapRow)" @onclick:preventDefault class="text-decoration-none">
                                        <img class="card-img-top" src="@(mapRowDetail == null ? "https://pavlov.bloodisgood.net/gunimages/unknown.png" : mapRowDetail.ImageURL + "/?imw=256&imh=256&ima=fit&impolicy=Letterbox&imcolor=%23000000&letterbox=true")" alt="@mapRow.MapLabel" />
                                    </a>
                                    <div class="card-body">
                                        <a href="#" @onclick="() => changeMap(mapRow)" @onclick:preventDefault class="text-decoration-none">
                                            <h5 class="card-title">@(mapRowDetail == null ? mapRow.MapLabel : mapRowDetail.Name)</h5>
                                        </a>
                                        <p class="card-text">
                                            <div class="container px-0">
                                                <div class="row gx-0">
                                                    <div class="col-auto px-1">
                                                        <b>GameMode:</b>
                                                    </div>
                                                    <div class="col text-end px-1">@mapRow.GameMode</div>
                                                </div>
                                                @if (mapRowDetail == null)
                                                {
                                                    <div class="row gx-0">
                                                        <div class="col-auto px-1">Loading...</div>
                                                    </div>
                                                }
                                            </div>
                                        </p>
                                    </div>
                                </div>
                            }
                        }
                        <h3 class="mt-3">Enter a map name, workshop ID or workshop URL to change to</h3>
                        <EditForm Model="@mapChangeInput" OnValidSubmit="@mapChange">
                            <DataAnnotationsValidator />
                            <div class="container mb-5">
                                <div class="row">
                                    <ValidationSummary />
                                </div>
                                <div class="row">
                                    <div class="col ps-0">
                                        <InputText @bind-Value="mapChangeInput.Map" class="form-control" placeholder="Map name / ID / URL" />
                                    </div>
                                    <div class="col">
                                        <InputSelect @bind-Value="mapChangeInput.GameMode" class="form-select">
                                            <option selected disabled>Select a game mode</option>
                                            @foreach (GameMode gameMode in Enum.GetValues(typeof(GameMode)))
                                            {
                                                <option value="@gameMode">@gameMode</option>
                                            }
                                        </InputSelect>
                                    </div>
                                    <div class="col">
                                        <button type="submit" class="btn btn-outline-primary">Change map</button>
                                    </div>

                                </div>
                            </div>
                        </EditForm>
                    </div>
                    <div class="tab-pane container fade px-0" id="offline">
                        @*TODO: PavlovServerContext is sometimes disposed??*@
                        @try
                        {
                            foreach (PersistentPavlovPlayer player in PavlovServerContext.Players.Where(p => p.ServerId == ServerId).AsEnumerable().Where(p => !(connection?.PlayerListPlayers?.ContainsKey(p.UniqueId) ?? false)).Union(connection?.BanList?.Select(b => new PersistentPavlovPlayer() { UniqueId = b, LastSeen = DateTime.MinValue }) ?? Array.Empty<PersistentPavlovPlayer>()).DistinctBy(p => p.UniqueId).OrderBy(p => (connection?.BanList?.Contains(p.UniqueId) ?? false) ? 1 : 0).ThenByDescending(p => p.LastSeen))
                            {
                                <PlayerCard PlayerId="@player.UniqueId" ServerId="@ServerId" />
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"PavlovServerContext is disposed in Server.razor, {ex.Message}");
                        }
                    </div>
                    <div class="tab-pane container fade px-0" id="cheats">
                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Give cash to player</h3>
                            <small class="text-muted">
                                Immediately applies additional funds to a player.
                            </small>
                            <EditForm Model="@giveCash" OnValidSubmit="@giveCashSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <InputSelect @bind-Value="giveCash.UniqueId" class="form-select">
                                        <option selected disabled>Select a player</option>

                                        @if (connection.PlayerDetails != null)
                                        {
                                            foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in connection.PlayerDetails)
                                            {
                                                <option value="@connectionPlayerDetail.Key">@connectionPlayerDetail.Value.PlayerName</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label>Amount</label>
                                    <InputNumber @bind-Value="giveCash.Amount" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control">Give cash</button>
                                </div>
                            </EditForm>
                        </div>

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Give item to player</h3>
                            <small class="text-muted">
                                Immediately puts an item in an appropriate player gear slot, replacing any item that already occupies the slot by dropping the existing item on the ground.
                            </small>
                            <EditForm Model="@giveItem" OnValidSubmit="@giveItemSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <InputSelect @bind-Value="giveItem.UniqueId" class="form-select">
                                        <option selected disabled>Select a player</option>

                                        @if (connection.PlayerDetails != null)
                                        {
                                            foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in connection.PlayerDetails)
                                            {
                                                <option value="@connectionPlayerDetail.Key">@connectionPlayerDetail.Value.PlayerName</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <InputSelect @bind-Value="giveItem.Item" class="form-select">
                                        <option selected disabled>Select an item</option>
                                        @foreach (Item item in Enum.GetValues(typeof(Item)))
                                        {
                                            <option value="@item">@item</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control">Give item</button>
                                </div>
                            </EditForm>
                        </div>

                        @if (serverInfo.Teams)
                        {
                            <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                                <h3 class="mb-0">Give cash to team</h3>
                                <small class="text-muted">
                                    Immediately applies additional funds to all players in a team.
                                </small>
                                <EditForm Model="@giveTeamCash" OnValidSubmit="@giveTeamCashSubmitted" class="mt-3">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-3">
                                        <InputSelect @bind-Value="giveTeamCash.TeamId" class="form-select">
                                            <option selected disabled>Select a team</option>
                                            <option value="0">Blue team</option>
                                            <option value="1">Red team</option>
                                        </InputSelect>
                                    </div>
                                    <div class="mb-3">
                                        <label>Amount</label>
                                        <InputNumber @bind-Value="giveTeamCash.Amount" class="form-control" />
                                    </div>
                                    <div class="mb-3">
                                        <button type="submit" class="btn btn-outline-success form-control">Give cash</button>
                                    </div>
                                </EditForm>
                            </div>
                        }

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Give vehicle to player</h3>
                            <small class="text-muted">
                                Immediately spawns a vehicle inside the player. Inside! The player may get stuck from this.
                            </small>
                            <EditForm Model="@giveVehicle" OnValidSubmit="@giveVehicleSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <InputSelect @bind-Value="giveVehicle.UniqueId" class="form-select">
                                        <option selected disabled>Select a player</option>

                                        @if (connection.PlayerDetails != null)
                                        {
                                            foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in connection.PlayerDetails)
                                            {
                                                <option value="@connectionPlayerDetail.Key">@connectionPlayerDetail.Value.PlayerName</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <InputSelect @bind-Value="giveVehicle.Vehicle" class="form-select">
                                        <option selected disabled>Select a vehicle</option>
                                        @foreach (Vehicle vehicle in Enum.GetValues(typeof(Vehicle)))
                                        {
                                            <option value="@vehicle">@vehicle</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control">Spawn vehicle</button>
                                </div>
                            </EditForm>
                        </div>

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Set player skin</h3>
                            <small class="text-muted">
                                Immediately applies the specified model to the player.
                            </small>
                            <EditForm Model="@playerSkin" OnValidSubmit="@setPlayerSkinSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <InputSelect @bind-Value="playerSkin.UniqueId" class="form-select">
                                        <option selected disabled>Select a player</option>

                                        @if (connection.PlayerDetails != null)
                                        {
                                            foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in connection.PlayerDetails)
                                            {
                                                <option value="@connectionPlayerDetail.Key">@connectionPlayerDetail.Value.PlayerName</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <InputSelect @bind-Value="playerSkin.Skin" class="form-select">
                                        <option selected disabled>Select a skin</option>
                                        @foreach (Skin skin in Enum.GetValues(typeof(Skin)))
                                        {
                                            <option value="@skin">@skin</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control">Set skin</button>
                                </div>
                            </EditForm>
                        </div>

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Slap player</h3>
                            <small class="text-muted">
                                Immediately applies the specified amount of damage to the player.
                            </small>
                            <EditForm Model="@slap" OnValidSubmit="@slapSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <InputSelect @bind-Value="slap.UniqueId" class="form-select">
                                        <option selected disabled>Select a player</option>

                                        @if (connection.PlayerDetails != null)
                                        {
                                            foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in connection.PlayerDetails)
                                            {
                                                <option value="@connectionPlayerDetail.Key">@connectionPlayerDetail.Value.PlayerName</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label>Amount</label>
                                    <InputNumber @bind-Value="slap.Amount" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control">Slap</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                    <div class="tab-pane container fade px-0" id="server">

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Add or remove mod</h3>
                            <small class="text-muted">
                                Add or remove a moderator. Moderators can not be vote-kicked.
                            </small>
                            <EditForm Model="@addOrRemoveMod" OnValidSubmit="@addOrRemoveModSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <InputSelect @bind-Value="addOrRemoveMod.UniqueId" class="form-select">
                                        <option selected disabled>Select a player</option>

                                        @if (connection.PlayerDetails != null)
                                        {
                                            foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in connection.PlayerDetails)
                                            {
                                                <option value="@connectionPlayerDetail.Key">@connectionPlayerDetail.Value.PlayerName</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control" @onclick="@(() => addOrRemoveMod.Add = true)">Add</button>
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-danger form-control" @onclick="@(() => addOrRemoveMod.Add = false)">Remove</button>
                                </div>
                            </EditForm>
                        </div>


                        <div class="me-2" style="width: 850px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Set limited ammo type</h3>
                            <small class="text-muted">
                                Immediately apply how ammo is handled on the server.<br />
                                <b>Unlimited:</b> Players carry unlimited ammo, no boxes<br />
                                <b>Limited Generic:</b> Players carry ammo boxes, one box for each weapon class (Pistol, Submachine gun, Rifles/MGs, Shotgun, Sniper)<br />
                                <b>Limited Specific:</b> Players carry ammo boxes, one box for each individual weapon<br />
                                <b>Limited Special:</b> All weapons except &quot;special&quot; weapons are unlimited, more clarification is needed<br />
                                <b>Boxless Mode:</b> No information available, clarification required!
                            </small>
                            <EditForm Model="@limitedAmmoType" OnValidSubmit="@setLimitedAmmoTypeSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <InputSelect @bind-Value="limitedAmmoType.AmmoType" class="form-select">
                                        <option selected disabled>Select a type</option>
                                        @foreach (AmmoType ammoType in Enum.GetValues(typeof(AmmoType)))
                                        {
                                            <option value="@ammoType">@ammoType</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control">Set ammo type</button>
                                </div>
                            </EditForm>
                        </div>

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Custom command</h3>
                            <small class="text-muted">
                                Execute a custom command on the server
                            </small>
                            <EditForm Model="@customCommand" OnValidSubmit="@customCommandSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <InputText @bind-Value="customCommand.Command" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control">Execute</button>
                                </div>
                            </EditForm>
                        </div>


                        @if (serverInfo.GameMode == GameMode.SND.ToString())
                        {
                            <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                                <h3 class="mb-0">Reset SND</h3>
                                <small class="text-muted">
                                    Resets and restarts the current SND match.
                                </small>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-warning form-control" @onclick="resetSndSubmitted">Reset SND</button>
                                </div>
                            </div>
                        }

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Set or remove pin</h3>
                            <small class="text-muted">
                                Immediately set or remove the pin password protection on the server.<br />
                                Set pins require any player to input the correct four-digit pin to join the server.<br />
                                Removed pins let players join without having to enter a pin.
                            </small>
                            <EditForm Model="@pin" OnValidSubmit="@pinSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="mb-3">
                                    <label>Pin</label>
                                    <InputText @bind-Value="pin.Pin" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control" @onclick="@(() => pin.Set = true)">Set pin</button>
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-danger form-control" @onclick="@(() => pin.Set = false)">Remove pin</button>
                                </div>
                            </EditForm>
                        </div>

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Show name tags</h3>
                            <small class="text-muted">
                                Immediately enables or disables name tags above friendly players
                            </small>
                            <div class="my-3">
                                <button class="btn btn-outline-success form-control" @onclick="enableNametags">Enable</button>
                            </div>
                            <div class="my-3">
                                <button class="btn btn-outline-danger form-control" @onclick="disableNametags">Disable</button>
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane container fade px-0" id="ttt">
                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">End round</h3>
                            <small class="text-muted">
                                Immediately ends the current round
                            </small>
                            <div class="mb-3">
                                <button type="submit" class="btn btn-warning form-control" @onclick="tttEndRoundSubmitted">End round</button>
                            </div>
                        </div>

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Toggle timer</h3>
                            <small class="text-muted">
                                Pause or resume the current timer
                            </small>
                            <div class="mb-3">
                                <button class="btn btn-warning form-control" @onclick="tttToggleTimerSubmitted">Toggle timer</button>
                            </div>
                        </div>

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Toggle skin menu</h3>
                            <small class="text-muted">
                                Toggle always enable skin menu on or off
                            </small>
                            <div class="mb-3">
                                <button class="btn btn-warning form-control" @onclick="tttToggleSkinMenuSubmitted">Toggle</button>
                            </div>
                        </div>

                        <div class="me-2" style="width: 425px; display: inline-block; vertical-align: top;">
                            <h3 class="mb-0">Karma</h3>
                            <small class="text-muted">
                                Set the karma of a player to a specific value or reset it to the default value
                            </small>
                            <EditForm Model="@karma" OnValidSubmit="@tttKarmaSubmitted" class="mt-3">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="mb-3">
                                    <InputSelect @bind-Value="karma.UniqueId" class="form-select">
                                        <option selected disabled>Select a player</option>

                                        @if (connection.PlayerDetails != null)
                                        {
                                            foreach (KeyValuePair<ulong, PlayerDetail> connectionPlayerDetail in connection.PlayerDetails)
                                            {
                                                <option value="@connectionPlayerDetail.Key">@connectionPlayerDetail.Value.PlayerName</option>
                                            }
                                        }
                                    </InputSelect>
                                </div>
                                <div class="mb-3">
                                    <label>Karma</label>
                                    <InputNumber @bind-Value="karma.Amount" class="form-control" />
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-success form-control" @onclick="@(() => karma.Set = true)">Set karma</button>
                                </div>
                                <div class="mb-3">
                                    <button type="submit" class="btn btn-outline-warning form-control" @onclick="@(() => karma.Set = false)">Reset karma</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private const bool separateConnection = false;

    [Parameter]
    [EditorRequired]
    public string ServerId { get; set; } = string.Empty;

    private async Task loadMaps(PavlovRconConnection connection)
    {
        if (!MapsState.Value.ServerMaps.ContainsKey(ServerId))
        {
            lock (Dispatcher)
            {
                Dispatcher.Dispatch(new MapsLoadServerAction(ApiKey.ApiKey, ServerId));
            }
        }

        await Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Rcon.GetServer(ApiKey.ApiKey, ServerId) is PavlovRconConnection connection)
        {
            connection.OnServerErrorRaised += (id, error) =>
            {
                bool? online = Rcon.GetServer(ApiKey.ApiKey, ServerId)?.Online;
                if (!online.HasValue || !online.Value || id != ServerId)
                {
                    return;
                }

                Toast.ShowError(error, "Error");
            };
            if (!PavlovServersState.Value.ServerNamesFromGameIni.ContainsKey(ServerId))
            {
                Dispatcher.Dispatch(new PavlovServerLoadNameFromGameIniAction(connection.ApiKey, ServerId));
            }
            await loadMaps(connection);
        }

        await base.OnParametersSetAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Rcon.OnServersUpdated += refresh;
    }

    private async void refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);
        Rcon.OnServersUpdated -= refresh;
    }

    private async Task changeMap(ServerMapModel serverMap)
    {
        MapWorkshopModel? mapDetail = null;
        if (serverMap.IsWorkshopMap)
        {
            MapsState.Value.MapDetails.TryGetValue(serverMap.WorkshopId, out mapDetail);
        }

        if (Rcon.GetServer(ApiKey.ApiKey, ServerId) is not PavlovRconConnection connection)
        {
            Toast.ShowError("Server must be online to change the map");
            return;
        }

        try
        {
            GameMode gameMode = Enum.Parse<GameMode>(serverMap.GameMode);
            if (await RconService.SwitchMap(connection.ApiKey, ServerId, serverMap.MapLabel, gameMode, separateConnection))
            {
                Toast.ShowSuccess($"Map switching to {(mapDetail == null ? serverMap.MapLabel : mapDetail.Name)} ({serverMap.GameMode})");
            }
            else
            {
                Toast.ShowError("Server refuses to switch map");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
            return;
        }

    }

    private readonly MapChangeInputModel mapChangeInput = new();

    private async Task mapChange()
    {
        if (mapChangeInput.MapLabel == null || mapChangeInput.GameMode == null)
        {
            Toast.ShowError("Map label and game mode are required for a map change");
            return;
        }

        try
        {
            if (await RconService.SwitchMap(ApiKey.ApiKey, ServerId, mapChangeInput.MapLabel, mapChangeInput.GameMode.Value, separateConnection))
            {
                string mapName = mapChangeInput.MapLabel;
                if (mapChangeInput.IsWorkshopMap)
                {
                    mapName = SteamWorkshopService.GetMapDetail(mapChangeInput.MapId!.Value).Name;
                }

                Toast.ShowSuccess($"Changing map to {mapName}");
            }
            else
            {
                Toast.ShowError("Server refused to switch map");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
            return;
        }
    }

    private readonly AddOrRemoveModModel addOrRemoveMod = new();
    private readonly GiveCashModel giveCash = new();
    private readonly GiveItemModel giveItem = new();
    private readonly GiveTeamCashModel giveTeamCash = new();
    private readonly GiveVehicleModel giveVehicle = new();
    private readonly SetLimitedAmmoTypeModel limitedAmmoType = new();
    private readonly SetPlayerSkinModel playerSkin = new();
    private readonly SlapModel slap = new();
    private readonly SetPinModel pin = new();
    private readonly TTTKarmaModel karma = new();
    private readonly CustomCommandModel customCommand = new();

    private async Task addOrRemoveModSubmitted()
    {
        try
        {
            if (addOrRemoveMod.Add!.Value)
            {
                if (await RconService.AddMod(ApiKey.ApiKey, ServerId, addOrRemoveMod.UniqueId!.Value, separateConnection))
                {
                    Toast.ShowSuccess("Player is now a moderator");
                }
                else
                {
                    Toast.ShowError("Server refused to make player into a moderator");
                }
            }
            else
            {
                if (await RconService.RemoveMod(ApiKey.ApiKey, ServerId, addOrRemoveMod.UniqueId!.Value, separateConnection))
                {
                    Toast.ShowSuccess("Player is no longer a moderator");
                }
                else
                {
                    Toast.ShowError("Server refused to revoke moderator from player");
                }
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task giveCashSubmitted()
    {
        try
        {
            if (await RconService.GiveCash(ApiKey.ApiKey, ServerId, giveCash.UniqueId!.Value, giveCash.Amount!.Value, separateConnection))
            {
                Toast.ShowSuccess("Player received cash", "Player cheat executed");
            }
            else
            {
                Toast.ShowError("Server refused to give cash", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task giveItemSubmitted()
    {
        try
        {
            if (await RconService.GiveItem(ApiKey.ApiKey, ServerId, giveItem.UniqueId!.Value, giveItem.Item!.Value.ToString(), separateConnection))
            {
                Toast.ShowSuccess("Player received item", "Player cheat executed");
            }
            else
            {
                Toast.ShowError("Server refused to give item", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task giveTeamCashSubmitted()
    {
        try
        {
            if (await RconService.GiveTeamCash(ApiKey.ApiKey, ServerId, giveTeamCash.TeamId!.Value, giveTeamCash.Amount!.Value, separateConnection))
            {
                Toast.ShowSuccess("Team received cash", "Player cheat executed");
            }
            else
            {
                Toast.ShowError("Server refused to give team cash", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task giveVehicleSubmitted()
    {
        try
        {
            if (await RconService.GiveVehicle(ApiKey.ApiKey, ServerId, giveVehicle.UniqueId!.Value, giveVehicle.Vehicle!.Value.ToString(), separateConnection))
            {
                Toast.ShowSuccess("Player received vehicle", "Player cheat executed");
            }
            else
            {
                Toast.ShowError("Server refused to give vehicle", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task setLimitedAmmoTypeSubmitted()
    {
        try
        {
            if (await RconService.SetLimitedAmmoType(ApiKey.ApiKey, ServerId, (int)limitedAmmoType.AmmoType!.Value, separateConnection))
            {
                Toast.ShowSuccess("Ammo type has been set");
            }
            else
            {
                Toast.ShowError("Server refused to set ammo type");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task setPlayerSkinSubmitted()
    {
        try
        {
            if (await RconService.SetSkin(ApiKey.ApiKey, ServerId, playerSkin.UniqueId!.Value, playerSkin.Skin!.Value.ToString(), separateConnection))
            {
                Toast.ShowSuccess("Player skin has been set", "Player cheat executed");
            }
            else
            {
                Toast.ShowError("Server refused to set player skin", "Player cheat failed");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task slapSubmitted()
    {
        try
        {
            await RconService.Slap(ApiKey.ApiKey, ServerId, slap.UniqueId!.Value, slap.Amount!.Value, separateConnection);
            Toast.ShowSuccess("Player has been slapped", "Player cheat executed");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task resetSndSubmitted()
    {
        try
        {
            if (await RconService.ResetSND(ApiKey.ApiKey, ServerId, separateConnection))
            {
                Toast.ShowSuccess("SND round has been reset");
            }
            else
            {
                Toast.ShowError("Server refused to reset SND round");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task pinSubmitted()
    {
        if (this.pin.Set!.Value && this.pin.Pin == null)
        {
            Toast.ShowError("You need to enter a pin to set");
            return;
        }

        try
        {
            if (this.pin.Set!.Value)
            {
                if (!int.TryParse(this.pin.Pin, out int pin))
                {
                    Toast.ShowError("The server pin must be numeric");
                    return;
                }

                await RconService.SetPin(ApiKey.ApiKey, ServerId, pin, separateConnection);
                Toast.ShowSuccess("Pin has been set");
                return;
            }

            await RconService.SetPin(ApiKey.ApiKey, ServerId, null, separateConnection);
            Toast.ShowSuccess("Pin has been removed");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task enableNametags()
    {
        try
        {
            if (await RconService.Shownametags(ApiKey.ApiKey, ServerId, true, separateConnection))
            {
                Toast.ShowSuccess("Nametags have been made visible");
            }
            else
            {
                Toast.ShowError("Server refused make nametags visible");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task disableNametags()
    {
        try
        {
            if (await RconService.Shownametags(ApiKey.ApiKey, ServerId, false, separateConnection))
            {
                Toast.ShowSuccess("Nametags have been made invisible");
            }
            else
            {
                Toast.ShowError("Server refused make nametags invisible");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task tttEndRoundSubmitted()
    {
        try
        {
            if (await RconService.TTTEndRound(ApiKey.ApiKey, ServerId, separateConnection))
            {
                Toast.ShowSuccess("Round has been ended");
            }
            else
            {
                Toast.ShowError("Server refused to end the round");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }


    private async Task tttKarmaSubmitted()
    {
        if (karma.Set!.Value && karma.Amount == null)
        {
            Toast.ShowError("You need to specify an amount to set");
            return;
        }

        try
        {
            if (karma.Set!.Value)
            {
                if (await RconService.TTTSetKarma(ApiKey.ApiKey, ServerId, karma.UniqueId!.Value, karma.Amount!.Value, separateConnection))
                {
                    Toast.ShowSuccess("Player karma has been set");
                }
                else
                {
                    Toast.ShowError("Server refused to set player karma");
                }
                return;
            }

            if (await RconService.TTTFlushKarma(ApiKey.ApiKey, ServerId, karma.UniqueId!.Value, separateConnection))
            {
                Toast.ShowSuccess("Player karma has been reset");
            }
            else
            {
                Toast.ShowError("Server refused to reset player karma");
            }
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task tttToggleTimerSubmitted()
    {
        try
        {
            (bool success, bool state) = await RconService.TTTPauseTimer(ApiKey.ApiKey, ServerId, separateConnection);
            if (!success)
            {
                Toast.ShowError("Server refused to toggle pause timer");
            }

            Toast.ShowSuccess(state ? "Timer has been paused" : "Timer has been unpaused");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task tttToggleSkinMenuSubmitted()
    {
        try
        {
            (bool success, bool state) = await RconService.TTTAlwaysEnableSkinMenu(ApiKey.ApiKey, ServerId, separateConnection);

            if (!success)
            {
                Toast.ShowError("Server refused to toggle skin menu");
                return;
            }

            Toast.ShowSuccess(state ? "Skin menu has been enabled" : "Skin menu has been disabled");
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

    private async Task customCommandSubmitted()
    {
        try
        {
            Toast.ShowSuccess(await RconService.CustomCommand(ApiKey.ApiKey, ServerId, customCommand.Command, Server.separateConnection));
        }
        catch (Exception e)
        {
            Toast.ShowError(e.Message);
        }
    }

}
