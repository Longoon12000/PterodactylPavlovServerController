@page "/rcon"
@inherits FluxorComponent

@using Fluxor
@using Fluxor.Blazor.Web.Components
@using PterodactylPavlovServerController.Services
@using PterodactylPavlovServerController.Store
@using PterodactylPavlovServerController.Store.Servers
@using PterodactylPavlovServerDomain.Models

@inject IDispatcher Dispatcher
@inject PavlovRconConnectionService Rcon
@*@inject IState<PterodactylServersState> ServersState*@

@{
    Dispatcher.Dispatch(new PageTitleSetAction("Select a server"));
}

@if (!Rcon.Initialised)
{
    <div class="spinner-border text-info" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else
{
    @foreach (string serverId in Rcon.GetAllConnections().OrderBy(c => c.PterodactylServer.Name).Select(c => c.ServerId))
    {
        <ServerSelectorComponent ServerId="@serverId" />
    }
}

@code
{
    protected override void OnInitialized()
    {
        Rcon.OnServersUpdated += refresh;

        base.OnInitialized();
    }

    private async void refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override void Dispose(bool disposing)
    {
        Rcon.OnServersUpdated -= refresh;

        base.Dispose(disposing);
    }
}
